import hre, { ethers } from 'hardhat';
import { splitSignature } from '@ethersproject/bytes';

import { parseOrder, OrderValidator } from '../../';

async function main() {
  const [maker, taker] = await ethers.getSigners();
  console.log('maker', await maker.getAddress());
  console.log('taker', await taker.getAddress());
  const chainId = 12341234;
  const addresses: { [key: string]: string } = {
    PermitPost: '0xFD6D23eE2b6b136E34572fc80cbCd33E9787705e',
    Reactor: '0x4DAf17c8142A483B2E2348f56ae0F2cFDAe22ceE',
    Quoter: '0x1D13fF25b10C9a6741DFdce229073bed652197c7',
    Executor: '0x24d41dbc3d60d0784f8a937c59FBDe51440D5140',
    tokenA: '0xC976c932092ECcD8f328FfD85066C0c05ED54044',
    tokenB: '0x618fB9dbd2BD6eb968B4c1af36af6CB0b45310Ec',
  };

  const validator = new OrderValidator(ethers.provider, chainId, addresses.Quoter);

  // expired
  const expiredOrder =  '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004daf17c8142a483b2e2348f56ae0f2cfdae22cee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006322393a00000000000000000000000000000000000000000000000000000000632238d6000000000000000000000000000000000000000000000000000000006322393a000000000000000000000000c976c932092eccd8f328ffd85066c0c05ed540440000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000618fb9dbd2bd6eb968b4c1af36af6cb0b45310ec0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266';
  const expiredOrderSig = { v: 27, r: '0x6d73cb7a72843ed11202ca20b1c5270407a0167f2248b652f8cd7a918595c3f8', s: '0x527e56b1275990e2d1fbdcb7748b7912fbfd20a3396c3282236851557f386f09' };

  console.log('expired', await validator.validate({ order: parseOrder(expiredOrder), signature: expiredOrderSig }));

  // executed order
  const executedOrder = '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004daf17c8142a483b2e2348f56ae0f2cfdae22cee000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000918b194db980000000000000000000000000000000000000000000000000000000063223b980000000000000000000000000000000000000000000000000000000063223bfc000000000000000000000000c976c932092eccd8f328ffd85066c0c05ed540440000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000618fb9dbd2bd6eb968b4c1af36af6cb0b45310ec0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266';
  const executedOrderSig = { v: 27, r: '0xe0e15c632594c3263d3ea5e0350ee215bd4f3ac7ee26dd2654f3c950a9403390', s: '0x0a1275e95b2c971b57f5b5915d97e21f5968153b60b5094f28149b8600adc6e0' };

  console.log('executed', await validator.validate({ order: parseOrder(executedOrder), signature: executedOrderSig }));

  // insufficient funds
  const insufficientFundsOrder = '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004daf17c8142a483b2e2348f56ae0f2cfdae22cee000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000918b194de5e0000000000000000000000000000000000000000000000000000000063223e5e0000000000000000000000000000000000000000000000000000000063223ec2000000000000000000000000c976c932092eccd8f328ffd85066c0c05ed5404400000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000618fb9dbd2bd6eb968b4c1af36af6cb0b45310ec0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266';
  const insufficientFundsOrderSig = { v: 27, r: '0x762f78f7e12cd8e8e9eda4d0a245de7c2e6997672dd4e5f0680f0df077782f83', s: '0x52403980639f2d5138ec107ab5e860bcfe20964015c496b06edeaf9131ad23b8' };

  console.log('insufficient funds', await validator.validate({ order: parseOrder(insufficientFundsOrder), signature: insufficientFundsOrderSig }));
}


void main();
